the google maps api is needed but only for marking the doctors on the map 
the map controller is put on hold so is the doctor.js in serverices and the doctor list 
for now the files above are active, but are unnesecary what needs to be done is the frontend just needs the addrress from backend thats it, map in 
backend is redundant


below is the steps to do the marking and shit but needs to be adjusted for needs 
// Step 1: Get client's address input
var clientAddress = prompt("Enter your address:");

// Step 2: Geocode client's address
var geocodeUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(clientAddress) + "&key=YOUR_API_KEY";
fetch(geocodeUrl)
  .then(function(response) {
    return response.json();
  })
  .then(function(data) {
    // Extract client's latitude and longitude
    var clientLatitude = data.results[0].geometry.location.lat;
    var clientLongitude = data.results[0].geometry.location.lng;

    // Step 3: Retrieve list of doctors from your database
    var doctors = [
      { name: "Doctor A", address: "123 Main St, City A" },
      { name: "Doctor B", address: "456 Elm St, City B" }
      // Add more doctors here
    ];

    // Step 4: Calculate distances and sort the list of doctors
    var distancePromises = doctors.map(function(doctor) {
      var doctorGeocodeUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(doctor.address) + "&key=YOUR_API_KEY";
      return fetch(doctorGeocodeUrl)
        .then(function(response) {
          return response.json();
        })
        .then(function(doctorData) {
          // Calculate distance using Haversine formula or other methods
          var doctorLatitude = doctorData.results[0].geometry.location.lat;
          var doctorLongitude = doctorData.results[0].geometry.location.lng;
          var distance = calculateDistance(clientLatitude, clientLongitude, doctorLatitude, doctorLongitude);
          doctor.distance = distance;
        });
    });

    // Wait for all distance calculations to complete
    Promise.all(distancePromises).then(function() {
      // Step 5: Sort doctors based on distance
      doctors.sort(function(a, b) {
        return a.distance - b.distance;
      });

      // Step 6: Display the sorted list of doctors
      for (var i = 0; i < doctors.length; i++) {
        console.log(doctors[i].name + ": " + doctors[i].distance + " miles");
      }

      // Step 7: Use Google Maps API to display a map
      var map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: clientLatitude, lng: clientLongitude },
        zoom: 10
      });

      // Step 8: Add markers to the map
      for (var i = 0; i < doctors.length; i++) {
        var doctorLatLng = new google.maps.LatLng(doctors[i].latitude, doctors[i].longitude);
        new google.maps.Marker({
          position: doctorLatLng,
          map: map,
          title: doctors[i].name
        });
      }
    });
  });

// Helper function to calculate distance between two points using Haversine formula
function calculateDistance(lat1, lon1, lat2, lon2) {
  var R = 6371; // Radius of the earth in kilometers
  var dLat = deg2rad(lat2 - lat1);
  var dLon = deg2rad(lon2 - lon1);
  var a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
  var c = 2 * Math.atan2(Math.sqrt
